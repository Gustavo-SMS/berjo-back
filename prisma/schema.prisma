// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  login         String    @unique
  password      String
  role          Role      @default(CUSTOMER)
  refreshToken  String?   @db.Text

  passwordResetToken    String?  @db.Text
  passwordResetExpires  DateTime?

  customerId    String?   @unique
  customer      Customer? @relation(fields: [customerId], references: [id])
}

enum Role {
  ADMIN
  CUSTOMER
}

model Customer {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  phone       Float
  debt        Float?
  address     Address?
  created_at  DateTime  @default(now())
  isActive    Boolean   @default(true)

  user        User?     

  orders      Order[]

  @@map("customers")
}

model Address {
  id            Int       @id @default(autoincrement())
  street        String
  house_number  Int
  city          String
  district      String
  zip           Int

  customer      Customer  @relation(fields: [customer_id], references: [id])
  customer_id   String    @unique

  @@map("address")
}

model Order {
  id              String   @id @default(uuid())
  total_price     Float
  status          String   @default("Em espera")
  created_at      DateTime @default(now())

  blind           Blind[]

  customer        Customer @relation(fields: [customer_id], references: [id])
  customer_id     String

  @@map("orders")
}

model Blind {
  id              String   @id @default(uuid())
  quantity        Int
  width           Float
  height          Float
  command_height  Float
  model           String
  observation     String?
  square_metre    Float
  blind_price     Float

  order           Order @relation(fields: [order_id], references: [id])
  order_id        String

  type            Blind_Type @relation(fields: [type_id], references: [id])
  type_id         String
}

model Blind_Type {
  id          String @id @default(uuid())
  type        String
  collection  String
  color       String
  max_width   Float?
  price       Float

  blind       Blind[]
}